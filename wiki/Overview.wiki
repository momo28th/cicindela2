#summary 概要 / overview

<wiki:toc max_depth="2" />

= JP =

== URLを叩くだけの簡単なAPI ==

Cicindela は、web API での入出力を基本とした汎用レコメンデーションエンジンです。

Amazon の *「この商品を買った人はこの商品も買っています」* も、*「このページを見た人はこのページも見ています」* も、簡単にいうと

 #  *「ユーザ1が、アイテム2を選択した」, 「ユーザ3がアイテム4を選択した」, ... * というデータを蓄積する
 #  上記のデータを元に、 *「アイテム2を選択した人は他に何番のアイテムを選択した ?」「ユーザ1へのおすすめアイテム番号は ?」 ...* という質問に答える

という形に一般化できます。

Cicindela に *「ユーザ1がアイテム2を選択した」* という情報を登録するには
{{{
  http://(ベースURL)/cicindela/record?set=(セット名)&op=insert_pick&user_id=1&item_id=2
}}}
というURLにリクエストを送るだけです。

また、Cicindela に *「ユーザ1にオススメするアイテムは ?」* という質問をするには
{{{
  http://(ベースURL)/cicindela/recommend?set=(セット名)&op=for_user&user_id=1
}}}
というURLにリクエストを送るだけです。結果は
{{{
  10
  12
  24
  ...
}}}
という改行区切りのidリストの形で返ります。上の結果は、 *「ユーザ1にオススメするのはアイテム10, アイテム12、アイテム24, ... 」* という意味です。


このように、Cicindela とそれを利用するアプリケーションとは、ユーザid、アイテムid などの簡単なid値のみでやりとりを行います。

アプリケーションは、適当なタイミング (ユーザが商品を購入したとか、特定のページを見たとか) でユーザidやアイテムidを送信し、レコメンデーションを表示したい時にまた同じidで問い合わせを行うだけです。

== 柔軟な内部構造 ==

「簡単な数字しかやりとりしない」イコール、「簡単な処理しかできない」のではありません。逆です。

「ユーザXがアイテムYを選択した」というデータの蓄積から、ユーザXに次に何をレコメンドするのか、を計算する方法については様々な実装方法があります。上で見たように「このユーザへのおすすめは?」と問われてから、おすすめidのリストを決定するまでの処理は高度に抽象化されており、プラグインの形式で様々な計算方法を自在に組み合わせることができます。

詳しくは [FilterChain] [Example] などを参照して下さい。








= EN =