#summary デモ用データセットを用いたクイックスタート / quick start with demo datasets

<wiki:toc max_depth="2" />

= JP =

ライブドア，あるいは他者が提供する，デモ用のデータセットを利用して動作確認をすることができます。

([Install] を先に済ませてあることが前提です。)

以下のデモセットアップを試す場合は，この操作で misc/ 以下を demo_data ブランチに切り替えて下さい。
{{{
 cd /home/cicindela
 svn switch http://cicindela2.googlecode.com/svn/branches/demo_data/misc misc
}}}


== livedoor clip dataset を使ったサンプルセットアップ ==

=== データベース & テーブル作成 ===

cicindela は，集計セット毎に別々のデータベースを利用します。
例えば作成するデータベース名が cicindela_clip_db ，mysql のパスが /usr/local/mysql/bin/mysql である場合，以下のようにして新規データベースのセットアップができます。
{{{
 cd misc
 perl create_init_sql.pl --db_name=cicindela_clip_db | /usr/local/mysql/bin/mysql -uroot
}}}


専用のユーザを作成する場合は，以下のように同時に指定することも出来ます。
{{{
 perl create_init_sql.pl --db_name=cicindela_clip_db
     --grant_user=cicindela --grant_pass=japana --grant_host=% | /usr/local/mysql/bin/mysql -uroot 
}}}
この場合は，データベースとテーブルのセットアップに加えて
{{{
  grant all on cicindela_clip_db.* to "cicindela"@"%" identified by "japana";
  flush privileges;
}}}  
が発行されます。

デフォルトのワイルドカードのユーザが権限設定をややこしくする場合があるので，必要に応じて
{{{
 SQL> drop user ""@"localhost";
 SQL> flush privileges;
}}}
などをしといた方がいいかもしれません。

=== データのインポート ===
{{{
 cd misc/clip_data
 gunzip ldclip_dataset_s.csv.gz
 perl importer.pl  --work_dir=`pwd` | /usr/local/mysql/bin/mysql -uroot
}}}

※ローダースクリプトを利用するには perl モジュール Text:CSV_XS が必要です。

※このスクリプトは中間データを work_dir に書き出したあと「load data infile ... 」ステートメントを mysql に渡します。従って，work_dir は mysql ユーザから参照可能である必要があります。

=== 設定 ===

lib/Cicindela/Config/`_`common.pm の中に，clip のデータを利用するためのサンプル設定がコメントとして挿入されています。

該当部分 ("## sample settings for ldclip_dataset " というコメントの直後から，"## sample
settings for movielens dataset " というコメントの直前まで) のコメントアウトを外して下さい。

必要に応じて，datasource => [ ] (データベース接続用の設定値) の行などを編集して下さい。

=== clip_simple 集計セットの手動起動 ===

{{{
 bin/batch.pl --track=1
}}}
を叩くと，設定ファイル中， "calculation_track => 1" となっている集計セット  (この例では，' clip_simple' という名前の集計セット) が処理されます。

ただし，初回  (=「前回の集計終了時刻」が空のとき) は何も起きませんので，上のコマンドを二回叩いて下さい。
ログは log/var/log.txt に書き出されます。

log に "clip_simple done." と表示されるまで待ちます。(ある程度時間がかります。)

=== clip_simple 集計セットの結果確認 ===

{{{
 /usr/local/apache2/bin/apachectl start
}}}
でmodperlを起動したあと，
{{{
  http://127.0.0.1/cicindela/recommend?op=for_item&set=clip_simple&item_id=39102
}}}
などを確認します。

正常に動いている場合は 
{{{
 49425
 44936
 42886
 ...
}}}
といった表示になるはずです。これが，アイテムid=1 のページに対するレコメンデーション (「このページを見ている人はこのページも見ています」の結果です。)

cicindela はユーザやアイテムなどをすべて id値のみで扱っているので，それぞれの id が何を意味していたかは，cicindela を利用するアプリケーション側で知っておく必要があります。

(user_id, item_id に数値以外のものを指定する方法もありますが，基本的には，整数idを利用するように設計されています。)

「データのインポート」の手順の際に，misc/clip_data 以下に pages.txt という中間ファイルが書き出されていますので，これを元にそれぞれのアイテムid が実際にはどの url を表しているのかを確認して下さい。

ちなみにアイテムid 39102 は

 「livedoor reader パーフェクトガイド - livedoor ディレクター Blog」http://blog.livedoor.jp/ld_directors/archives/50735409

です。
レコメンドのトップ2つのid 49425 と 44936 は、いずれも livedoor reader のメインの開発者のブログである http://mala.nowa.jp/ 内のエントリでした。

=== clip_hybrid 集計セットの手動起動と確認 ===

上でコメントアウトした設定ファイルには，clip_simple の他に clip_tags, clip_hybrid という二つの集計セットが定義されています。

clip_tags は，tag_id を user_id にみたてて読み込むことにより，「同じユーザが選んでいるアイテム」のかわりに「同じタグがついているアイテム」をレコメンドするようにした変則的な集計セットです。
{{{
 bin/batch.pl --track=2
}}}
で，この集計を走らせることができます。(初回は2回叩く必要あり)

また，clip_hybrid は、上記の「clip_simple (通常の協調フィルタリング)」と「clip_tags (タグベースの協調フィルタリング)」をだいたい6:4で混ぜ合わせて表示する，表示専用のセットです。
(clip_simple と clip_tags の集計が終わっていれば結果を表示できるので，clip_hybrid 自体はバッチによる再集計を必要としません。)

{{{
  http://127.0.0.1/cicindela/recommend?op=for_item&set=clip_hybrid&item_id=39102
}}}
などで，異なる集計セットによるレコメンデーション結果を確認できます。


=== バッチの設定方法の捕捉 ===

上の2つの例で使った集計セットは，最初に [Install] で設定した集計用バッチスクリプト ( etc/service/cicindela_batch) では処理されません。
 
設定に calculation_track => ... という指定のある集計セットは，明示的に --track= ... オプションを渡された時のみ処理されます。

calculation_track の指定を外すか，
{{{
 sudo ln -s /home/cicindela/etc/service/cicindela_batch_track1 /service/cicindela_batch_track1
 sudo ln -s /home/cicindela/etc/service/cicindela_batch_track2 /service/cicindela_batch_track2
}}}
などとすることで，自動的に再計算を走らせることができるようになります。

batch.pl は集計セットを順にひとつずつ処理しますが，このようにすることで複数の集計セットのアップデートを同時に走らせることができるようになります。時間のかかる集計セットと，軽いけれど頻繁に更新する必要がある集計セットとを並列で走らせておく場合に使います。

※「refresh interval => (再計算が行われるまでの秒数)」の設定値が小さすぎると，無駄に高頻度で再計算をはじめるのでここも調整しておく必要があります。


== movielens dataset を使ったサンプルセットアップ ==

=== データベース & テーブル作成 ===
{{{
 cd misc
 perl create_init_sql.pl --db_name=cicindela_movielens_db
     --grant_user=cicindela --grant_host=% --grant_pass=japana | /usr/local/mysql/bin/mysql -uroot
}}}

=== データの取得と読み込み ===

以下のサイトからデータセット (1,000,000 Data Set) を取得します。

http://www.grouplens.org/node/73

解凍したデータを misc/movielens_data/ 以下に置き，以下のようにしてロードします。。(読み込みに必要なのは ratings.dat のみです。)

{{{
 cd misc/movielens_data
 perl importer.pl --work_dir=`pwd` | /usr/local/mysql/bin/mysql -uroot cicindela_movielens_db
}}}

=== 設定 ===

lib/Cicindela/Config/`_`common.pm の中に，movielens のデータを利用するためのサンプル設定がコメントとして挿入されています。

該当部分 ("## sample settings for movielens dataset " というコメントの直後にある 'movielens' => ... の部分) のコメントアウトを外して下さい。

※ 'movielens' セットアップは二つ定義されています。少しずつ違った計算方法になっているので，どちらか片方ずつをコメントアウトして試して下さい。

=== movielens 集計セットの手動起動 ===

{{{
 bin/batch.pl --track=3
}}}
(初回は二回叩く必要あり)

log に "movielens done." と表示されるまで待ちます。

=== movielens 集計セットの結果確認 ===
{{{
  http://127.0.0.1/cicindela/recommend?op=for_item&set=movielens&item_id=741
}}}
などで結果を確認できます。clip のところでも述べたように，cicindela は基本的には id のみしか返しません。id と実際のタイトルの対応は，ダウンロードしたデータセット内にある movies.dat で確認して下さい。


= EN =